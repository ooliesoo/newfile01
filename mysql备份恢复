一、mysqldump完全备份
物理备份：直接拷贝mysql目录备份,  cp/tar ，改所属组所有者
逻辑备份：mysqldump，mysql
备份操作：- mysqldump -uroot -p密码 库名 >路径/xxx.sql
恢复操作：- mysql -uroot -p密码 库名< 路径/xxx.sql
库名表示方式
-  --all-databases 或 -A   所有库
-  数据库名				   单个库
-  数据库名 表名            单个表
-  -B  数据库1 数据库2    多个库
# mysqldump -uroot -pqwerDF1234. -A >/datadir/allbak.sql
# mysqldump -uroot -pqwerDF1234. dba123>/datadir/dba123.sql
# mysqldump -uroot -pqwerDF1234. dba123 t1 >/datadir/dba123_t1.sql
# mysqldump -uroot -pqwerDF1234. dba123 dba456 >/datadir/dba.sql
[root@client ~]# scp -r /datadir/ 192.168.4.62:/
//备份库的时候加了-B后恢复不需要创建相对应的数据库，其他的则需要
mysql> create database dba123;
# mysql -uroot -pqwerDF1234. dba123 </datadir/dba123.sql
或mysql> source /datedir/dba123.sql
二、增量备份
方法一：使用binlog日志文件实现增量备份和恢复
分析binlog日志
（1）、查看日志当前记录格式
 		   Show variables like “binlog_format”;
三种记录格式：
1、statement：每一条修改数据的sql命令都会记录在binlog日志中。
2、Row：不记录sql语句上下文相关信息，仅保存哪条记录被修改
3、Mixed：是以撒谎嗯两种格式的混合使用
binlog相关文件
- 主机-bin.index     		//记录已有日志文件名
- 主机名-bin.000001			//第一个二进制日志,500M上限

（手动生成新的日志文件：
1、重起mysql服务
2、执行sql操作 mysql> flush logs;
3、Mysqldump  --flush-logs
4、Mysql -uroot -p密码 -e ‘flush logs’）
（清理binlog日志
1、删除早于指定版本的binlog日志
Mysql> purge master logs to “binlog文件名”；
2、删除所有binlog日志，重建新日志
- mysql> reset master；）

（2）、修改日志记录格式
Binlog日志概述：二进制日志，记录所有更改数据的操作
优点：记录除查询之外的所有sql命令，可用于数据恢复，配置mysql主从同步的必要条件
[root@client ~]# vim /etc/my.cnf
log_bin=/logdir/plj                //log_bin[=dir/name]
server_id=100        //1~255
binlog_format=mixed
//max_binlog_size=数字m
[root@client ~]# mkdir /logdir/
[root@client ~]# chown mysql:mysql /logdir/
[root@client ~]# systemctl restart mysqld
[root@client ~]# mysqlbinlog /logdir/plj.000001 | grep -i insert  //查看
（3）、使用mysqlbinlog工具
- 格式：mysqlbinlog [选项] binlog日志文件名
- 常用选项
- --start-datetime=”yyyy-mm-dd hh:mm:ss”
- --stop-datetime=”yyyy-mm-dd hh:mm:ss”
- --start-position=数字      //偏移量
- --stop-position=数字
应用示例：查看从2014年1月2日15：30开始的更改操作
mysqlbinlog --start-datetime=”2014-01-02 15:30” /var/lib/mysql-bin.000001
（4）、binlog恢复数据
利用binlog恢复数据
基本思路：使用mysqlbinlog提取历史sql操作，通过管道交给mysql命令执行。
应用示例
[root@client ~]# mysqlbinlog --start-position=193 --stop-position=1552 /logdir/plj.000001 | mysql -uroot -pqwerDF1234.
[root@client ~]# mysqlbinlog --start-datetime="2018-10-20 11:00:00^C--stop-datetime="2018-10-20 11:00:00" /logdir/plj.000001 | mysql -uroot -pqwerDF1234.
---------------------------------------------------------------------------------------------------------

mysql> show master status;   //显示当前所用日志和日志的偏移量
mysql> flush logs；				//手动生成新日志方法，默认往最大编号的存
[root@client ~]# mysql -uroot -p123456 -e "flush logs"  //-e 执行数据库操作
[root@client ~]# mysqldump -uroot -pqwerDF1234. --flush-logs dba123 >/root/dba123.sql       //完全备份并且生成新的日志文件
mysql> purge master logs to “binlog文件名”；//删除早于指定版本的binlog日志
mysql> reset master;  //删除日志文件

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
方法二：使用innobackupex命令实现增量备份和恢复
物理备份缺点：跨平台性差，备份时间长、冗余备份、浪费存储空间
Mysqldump备份缺点：效率较低，备份和还原速度慢，备份过程中，数据插入和更新操作会被挂起。
XtraBackup工具  ，percona
- xtrabackup:C程序，支持innodb/Xtradb
- innobackupex:以Perl脚本封装xtrabackup,还支持MyISAM
(1)、安装提供命令的软件包
# yum -y install percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm 
# rpm -ivh libev-4.15-1.el6.rf.x86_64.rpm 
# rpm -ql percona-xtrabackup-24
# man innobackupex  
可以实现完全备份和恢复
]# innobackupex --user root -p 'qwerDF1234.' /allbak --no-timestamp
]# systemctl stop mysqld
]# rm -rf /var/lib/mysql/*
]# innobackupex --user root -p 'qwerDF1234.' --copy-back /allbak
]# chown -R mysql:mysql /var/lib/mysql
]# systemctl restart mysqld
]# mysql -uroot -pqwerDF1234.
+++++++++++++++++++++++++=增量备份和恢复+++++++++++
增量备份：备份上次备份后，所有新产生的数据
--incremental   目录
--incremental-basedir=目录名 增量备份时，指定上一次备份数据存储的目录名
------------------------------------------------------------------------------------------------
# innobackupex --user root --password qwerDF1234. /fullbak --no-timestamp
mysql> insert into a values(25);				  //完全备份
# innobackupex --user root --password 'qwerDF1234.' --incremental /newdir --incremental-basedir=/fullbak --no-timestamp   //增量备份
第一次增量备份后，继续往表中添加新数据
# innobackupex --user root --password 'qwerDF1234.' --incremental /newdir1 --incremental-basedir=/newdir --no-timestamp
# cat /fullbak/xtrabackup_checkpoints 			//备份信息
----------------------------------------------------------------------------------------------
--incremental-dir=目录名 准备恢复数据时，指定增量恢复数据存储的目录名
增量恢复
准备恢复数据	--apply-log
合并日志		--redo-only
拷贝数据		--copy-back
[root@client ~]# systemctl stop mysqld
[root@client ~]# mkdir /var/lib/mysql
[root@client ~]# innobackupex --user root --password qwerDF1234. --apply-log --redo-only /fullbak    //完全恢复
[root@client ~]# innobackupex --user root --password qwerDF1234. --apply-log --redo-only /fullbak --incremental-dir="/newdir"    //恢复增量
[root@client ~]# innobackupex --user root --password qwerDF1234. --apply-log --redo-only /fullbak --incremental-dir="/newdir2"	//恢复增量
[root@client ~]# innobackupex --user root -p qwerDF1234. --copy-back /fullbak
//拷贝文件
[root@client ~]# rm -rf /newdir /newdir2
[root@client ~]# chown -R mysql:mysql /var/lib/mysql
[root@client ~]# systemctl restart mysqld
==========================================================================================================
1、在完全备份文件中恢复单个表
mysql> show tables;
2、对db5库做完全备份
[root@client ~]# innobackupex --user root --password qwerDF1234. --database="db5" /db5bak --no-timestamp
3、查看备份信息
[root@client ~]# cat /db5bak/xtrabackup_checkpoints
4、删除db5库里的a表
mysql> drop table a;
5、恢复时需要创建回表结构
mysql> create table a(id int);
6、恢复单个表
(1)、删除表空间:
mysql> alter table db5.a discard tablespace;
(2)、--export  导出表信息并拷贝到数据库目录下
[root@client ~]# innobackupex --user root --password qwerDF1234. --database="db5" --apply-log --export /db5bak
[root@client ~]# cp /db5bak/db5/a.{ibd,cfg,exp} /var/lib/mysql/db5/
[root@client ~]# chown  mysql:mysql /var/lib/mysql/db5/a.*
(3)、导入表空间:
mysql> alter table db5.a import tablespace;
(4)、验证
mysql> select * from a;
[root@client ~]# rm -rf /var/lib/mysql/db5/a.{cfg,exp}
[root@client ~]# ls /var/lib/mysql/db5/




