一、mysql存储引擎
- Mysql服务软件自带的功能程序，处理表的处理器
功能组建：连接池、sql接口、分析器、优化器、查询缓存、存储引擎、文件系统、管理工具、
默认的存储引擎
- MySQL 5.0/5.1 ---> MyISAM
- MySQL 5.5/5.6 ---> InnoDB
(1)、列出可用的存储引擎类型
- show engines；或show engines\G
(2)、设置默认存储引擎
修改/etc/my.cnf配置文件
[mysqld]
Default-storage——engine=myisam
(3)、myisam村存储引擎
主要特点：支持表级锁，不支持事务、事务回滚、外键
相关的表文件：.frm     .MYI       .MYD
(4)、innodb存储引擎
主要特点：支持行级锁定，支持事务回滚、外键
相关的表文件：.frm、.ibd、ibdata1、ib_logfile0、ib_logfile1
(5)、mysql锁机制
锁粒度
- 表级锁：一次直接对整张表进行加锁
- 行级锁：只锁定某一行
- 页级锁：对整个页面（mysql管理数据的基本存储单位）进行加锁
锁类型
- 读锁（共享锁）：支持并发读
- 写锁（互斥锁、排他锁）：是独占锁，上锁期间其他线程不能读表或写表。
查看当前的锁状态，- 检查table_lock开头的变量，%作通配符。
mysql> show status like 'Table_lock%';
(6)、事务特性
Atomic：原子性
- 事务的整个操作是一个整体，不可分割，要么全部成功，要么全部失败。
Consistency：一致性
- 事务操作的前后，表中的记录没有变化
Isolation：隔离性
- 事务操作是相互隔离不受影响的。
Durability：持久性
- 数据一旦提交，不可改变，永久改变数据
关闭自动提交，默认是自动提交
mysql> show variables like "%autocommit%";      //查看提交状态
mysql> set autocommit=off;       //关闭自动提交
mysql> create table t2(id int)engine=innodb;
mysql> select * from t2;
mysql> insert into t2 values(666);
mysql> select * from t2;
mysql> rollback;
mysql> commit;
查询操作多的表适合使用myisam存储引擎，可以节省系统资源；
写操作多的表适合使用innodb存储引擎，可以加大并发访问量
--------------------------------------------------------------------------------
二、数据导入导出
（1）、数据导入
mysql> show variables like "secure_file_priv";
[root@client ~]# cp /etc/passwd /var/lib/mysql-files/
在mysql下执行系统命令
Mysql> system ls /etc/passwd
基本用法
- load data infile “目录名/文件名”
Into table 表名 fields terminated by “分隔符” lines terminated by “\n”;
--------------------------------------------------------------------------------
mysql> create table t3( 
    -> name char(50),
    -> password char(1),
    -> uid int(1),
    -> pid int(1),
    -> comment varchar(150),
    -> homedir varchar(100),
    -> shell char(30)
-> );
--------------------------------------------------------------------------------
mysql> load data infile "/var/lib/mysql-files/passwd"
    -> into table t3
    -> fields terminated by ":"
    -> lines terminated by "\n";
    
mysql> alter table t3 add id int(2) primary key auto_increment first;
--------------------------------------------------------------------------------
修改目录及查看修改结果
[root@client ~]# setenforce 0
[root@client ~]# mkdir /mydir
[root@client ~]# chown mysql /mydir/
[root@client ~]# vim /etc/my.cnf
[mysql]
secure_file_priv=/mydir
mysql> show variables like "secure_file_priv";
--------------------------------------------------------------------------------
（2）、数据导出
基本用法
- SQL查询into outfile “目录名/文件名”
fields terminated by “分隔符”
lines terminated by “\n”;
mysql> select * from t22 into outfile "/mydir/testip" 
    -> fields terminated by "   "
    -> lines terminated by "\n";
[root@client ~]# cat /mydir/testip
--------------------------------------------------------------------------------
三、管理表记录
（1）、添加表记录
格式一：添加一条记录，给所有字段赋值
- insert into 表名 values(字段列表);
格式二：添加N条记录，给所有字段赋值
- insert into 表名 
 Values
(字段列表)，(字段列表)，(字段列表)；
mysql> insert into t3 values
    -> (44,"nginx","x",2000,2000,"nginxserver","/home","/sbin/nologin");
格式三：添加1条记录，给指定字段赋值
- insert into 表名(字段名列表)  values(字段值列表);
格式四：添加N条记录，给指定字段赋值
- insert into 表名(字段名列表)  
values(字段值列表)，(字段值列表)，(字段值列表)；
mysql> insert into t3(name,password,shell) 
Values
("lisi","x","/bin/bash"),
("zhangsan","x","/bin/false");
------------------------------------------------------------------------
（2）查询表记录
语法格式
格式1： select 字段1,...,字段N from 表名;
格式2：select 字段1,...,字段N from 表名 where 条件表达式；
注意事项：使用*可一匹配所有字段，指定表名时，可以采用库名.表名的形式
mysql> select id,name,shell from t3 where shell="/bin/bash";
将显示的字段名起别名
select 字段1 字段1别名  from 表名;
mysql> select id user_id,name username from t3;
-------------------------------------------------------------------------
（3）更新表记录
格式1，更新表内的所有记录
update 表名 set 字段1=字段1值,字段2=字段2值; 
格式2，只更新符合条件的部分记录
update 表名 set 字段1=字段1值,字段2=字段2值 where 条件表达式;
mysql> update t3 set password="a",comment="student";
-------------------------------------------------------------------------
（4）删除表记录
格式1：仅删除符合条件的记录
delete from 表名 where 条件表达式；
mysql> delete from t3 where id=45;
格式2，删除所有的表
delete from 表名；
四、匹配条件
（1）、基本匹配条件
数值比较：字段类型必须数据数值类型
=   >   >=   <    <=   !=
字符比较/匹配空/非空：字段类型必须是字符类型      //先做与再做或
=   !=   IS NULL    IS NOT NULL
mysql> select * from t3 where homedir is null;
逻辑匹配：多个判断条件时使用
OR  AND   ! /not  非     （）提高优先级
mysql> select  * from t3 where uid=0 and name="root";
mysql> select  * from t3 where id=3 or id=4;
mysql> select name,id from t3 where (name="root" or name="bin") and uid=3;
mysql> select name,id from t3 where name="root" or name="bin" and uid=3;
范围内匹配/去重显示
in (值列表)、 not in (值列表)、 between 数字1 and 数字2 、 distinct 字段名
mysql> select name from t3 where name in ("apache","daemon","mysql","adm");
mysql> select name from t3 where id between 3 and 6;
mysql> select distinct shell from t3 ;
（2）高级匹配条件
模糊查询
基本用法：where 字段名 like ‘通配符’，_匹配单个字符、%匹配0～N个字符
mysql> select * from t3 where name like "r%";
mysql> select * from t3 where name like "r__t";
mysql> select * from t3 where name like '__%__';
正则表达式
基本用法：where 字段名 regexp ‘正则表达式’
- 正则元字符  ^  $  .  []  *  | 
mysql> select name  from t3 where name regexp '[0-9]';
mysql> select * from t3 where name regexp '^r|3$';
mysql> select * from t3 where name regexp '.*';
四则运算：字段必须是数值类型    + - * / %
mysql> alter table t3 add age tinyint(2) unsigned default 19 after name;
mysql> select name,age,2018-age birth from t3 where name="root";
（3）操作查询结果
聚集函数，mysql内置数据统计函数
- avg，sum，min，max，count
mysql> select max(uid),min(uid),sum(uid),avg(uid),count(name) from t3;
查询结果排序
基本用法：SQL查询 order by 字段名(通常是数值类型字段) [asc|desc];
mysql> select id,name from t3 where name regexp '^r' order by id desc;
查询结果分组
基本用法：-SQL查询 group by 字段名（通常是字符类型字段）；

查询结果过滤
基本用法
- SQL查询 having 条件表达式
- SQL查询 where 条件 having 条件表达式；
- SQL查询 group by 字段名 having 条件表达式；

限制查询结果显示行数
SQL查询 limit N； 		//显示查询结果前N条记录
SQL查询 limit N,M 		//显示指定范围内的查询记录
SQL查询 where 条件查询 limit 3;	//显示查询结果前3条记录
SQL查询 where 条件查询 limit 3,3;

